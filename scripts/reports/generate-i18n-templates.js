#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// Translation strings for each language
const translations = {
  en: {
    greeting: 'Good morning',
    reportIntro: "Here's the daily traffic report for",
    from: 'from',
    executiveSummary: 'Executive Summary',
    totalVisitors: 'Total Visitors',
    captureRate: 'Capture Rate',
    passersby: 'passersby',
    peakHour: 'Peak Hour',
    visitors: 'visitors',
    avgHourlyTraffic: 'Avg Hourly Traffic',
    busiestPeriod: 'Busiest Period',
    hourlyTrafficPattern: 'Hourly Traffic Pattern',
    visitorCount: 'Visitor Count',
    dailyCaptureRate: 'Daily Capture Rate',
    totalPassersby: 'total passersby',
    keyInsights: 'Key Insights:',
    morningTraffic: 'Morning traffic',
    afternoonTraffic: 'Afternoon traffic',
    eveningTraffic: 'Evening traffic',
    aboveAverage: 'above average',
    belowAverage: 'below average',
    closingMessage: "We hope this report provides valuable insights into your store's performance. More features and detailed analytics are coming soon!",
    bestRegards: 'Best regards,',
    automatedReport: 'This is an automated report generated by',
    subscriptionNotice: "You're receiving this because you're subscribed to daily reports for",
    vsYesterday: 'vs yesterday'
  },
  es: {
    greeting: 'Buenos d√≠as',
    reportIntro: 'Este es el informe diario de tr√°fico de',
    from: 'del',
    executiveSummary: 'Resumen Ejecutivo',
    totalVisitors: 'Total de Visitantes',
    captureRate: 'Tasa de Captura',
    passersby: 'transe√∫ntes',
    peakHour: 'Hora Pico',
    visitors: 'visitantes',
    avgHourlyTraffic: 'Tr√°fico Promedio por Hora',
    busiestPeriod: 'Per√≠odo m√°s Concurrido',
    hourlyTrafficPattern: 'Patr√≥n de Tr√°fico por Hora',
    visitorCount: 'N√∫mero de Visitantes',
    dailyCaptureRate: 'Tasa de Captura Diaria',
    totalPassersby: 'transe√∫ntes totales',
    keyInsights: 'Informaci√≥n Clave:',
    morningTraffic: 'Tr√°fico matutino',
    afternoonTraffic: 'Tr√°fico vespertino',
    eveningTraffic: 'Tr√°fico nocturno',
    aboveAverage: 'por encima del promedio',
    belowAverage: 'por debajo del promedio',
    closingMessage: 'Esperamos que este informe proporcione informaci√≥n valiosa sobre el rendimiento de su tienda. ¬°Pronto habr√° m√°s funciones y an√°lisis detallados!',
    bestRegards: 'Saludos cordiales,',
    automatedReport: 'Este es un informe automatizado generado por',
    subscriptionNotice: 'Est√° recibiendo esto porque est√° suscrito a los informes diarios de',
    vsYesterday: 'vs ayer'
  },
  pt: {
    greeting: 'Bom dia',
    reportIntro: 'Segue o relat√≥rio di√°rio de tr√°fego da',
    from: 'de',
    executiveSummary: 'Resumo Executivo',
    totalVisitors: 'Total de Visitantes',
    captureRate: 'Taxa de Captura',
    passersby: 'transeuntes',
    peakHour: 'Hora de Pico',
    visitors: 'visitantes',
    avgHourlyTraffic: 'Tr√°fego M√©dio por Hora',
    busiestPeriod: 'Per√≠odo mais Movimentado',
    hourlyTrafficPattern: 'Padr√£o de Tr√°fego Hor√°rio',
    visitorCount: 'Contagem de Visitantes',
    dailyCaptureRate: 'Taxa de Captura Di√°ria',
    totalPassersby: 'transeuntes totais',
    keyInsights: 'Informa√ß√µes Principais:',
    morningTraffic: 'Tr√°fego matinal',
    afternoonTraffic: 'Tr√°fego da tarde',
    eveningTraffic: 'Tr√°fego noturno',
    aboveAverage: 'acima da m√©dia',
    belowAverage: 'abaixo da m√©dia',
    closingMessage: 'Esperamos que este relat√≥rio forne√ßa informa√ß√µes valiosas sobre o desempenho da sua loja. Mais funcionalidades e an√°lises detalhadas em breve!',
    bestRegards: 'Com os melhores cumprimentos,',
    automatedReport: 'Este √© um relat√≥rio automatizado gerado pela',
    subscriptionNotice: 'Est√° a receber este email porque est√° subscrito aos relat√≥rios di√°rios da',
    vsYesterday: 'vs ontem'
  }
};

// Read the base template
const templatePath = path.join(__dirname, 'daily-report-template.html');
let template = fs.readFileSync(templatePath, 'utf8');

// Function to generate language-specific template
function generateTemplate(lang) {
  const t = translations[lang];
  let localizedTemplate = template;
  
  // Replace greeting and intro
  localizedTemplate = localizedTemplate.replace(
    'Good morning {{recipient_name}},<br><br>\n                                Here\'s the daily traffic report for <strong>{{store_name}}</strong> from {{report_date}}.',
    `${t.greeting} {{recipient_name}},<br><br>\n                                ${t.reportIntro} <strong>{{store_name}}</strong> ${t.from} {{report_date}}.`
  );
  
  // Replace section headers and labels
  localizedTemplate = localizedTemplate.replace('>Executive Summary<', `>${t.executiveSummary}<`);
  localizedTemplate = localizedTemplate.replace('>Total Visitors<', `>${t.totalVisitors}<`);
  localizedTemplate = localizedTemplate.replace('>Capture Rate<', `>${t.captureRate}<`);
  localizedTemplate = localizedTemplate.replace('{{passerby_count}} passersby', `{{passerby_count}} ${t.passersby}`);
  localizedTemplate = localizedTemplate.replace('>Peak Hour<', `>${t.peakHour}<`);
  localizedTemplate = localizedTemplate.replace('{{peak_visitors}} visitors', `{{peak_visitors}} ${t.visitors}`);
  localizedTemplate = localizedTemplate.replace('>Avg Hourly Traffic<', `>${t.avgHourlyTraffic}<`);
  localizedTemplate = localizedTemplate.replace('>Busiest Period<', `>${t.busiestPeriod}<`);
  localizedTemplate = localizedTemplate.replace('>Hourly Traffic Pattern<', `>${t.hourlyTrafficPattern}<`);
  
  // Replace chart legend
  localizedTemplate = localizedTemplate.replace('>Visitor Count<', `>${t.visitorCount}<`);
  localizedTemplate = localizedTemplate.replace('Daily Capture Rate:', `${t.dailyCaptureRate}:`);
  localizedTemplate = localizedTemplate.replace('({{passerby_total}} total passersby)', `({{passerby_total}} ${t.totalPassersby})`);
  
  // Replace insights
  localizedTemplate = localizedTemplate.replace('>Key Insights:<', `>${t.keyInsights}<`);
  localizedTemplate = localizedTemplate.replace('>Morning traffic ({{morning_traffic}} visitors) - {{morning_comparison}}<', 
    `>${t.morningTraffic} ({{morning_traffic}} ${t.visitors}) - {{morning_comparison}}<`);
  localizedTemplate = localizedTemplate.replace('>Afternoon traffic ({{afternoon_traffic}} visitors) - {{afternoon_comparison}}<', 
    `>${t.afternoonTraffic} ({{afternoon_traffic}} ${t.visitors}) - {{afternoon_comparison}}<`);
  localizedTemplate = localizedTemplate.replace('>Evening traffic ({{evening_traffic}} visitors) - {{evening_comparison}}<', 
    `>${t.eveningTraffic} ({{evening_traffic}} ${t.visitors}) - {{evening_comparison}}<`);
  
  // Replace closing message
  localizedTemplate = localizedTemplate.replace(
    'We hope this report provides valuable insights into your store\'s performance. More features and detailed analytics are coming soon!',
    t.closingMessage
  );
  localizedTemplate = localizedTemplate.replace('Best regards,', t.bestRegards);
  
  // Replace footer
  localizedTemplate = localizedTemplate.replace(
    'This is an automated report generated by',
    t.automatedReport
  );
  localizedTemplate = localizedTemplate.replace(
    'You\'re receiving this because you\'re subscribed to daily reports for',
    t.subscriptionNotice
  );
  
  return localizedTemplate;
}

// Generate templates for each language
const languages = ['en', 'es', 'pt'];

languages.forEach(lang => {
  const localizedTemplate = generateTemplate(lang);
  const outputPath = path.join(__dirname, `daily-report-template-${lang}.html`);
  fs.writeFileSync(outputPath, localizedTemplate);
  console.log(`‚úÖ Generated ${lang.toUpperCase()} template: ${outputPath}`);
});

// Also create a function to detect browser language and return appropriate template
const detectionScript = `
// Language detection helper
function getReportLanguage() {
  const browserLang = navigator.language || navigator.userLanguage;
  const lang = browserLang.toLowerCase().substring(0, 2);
  
  // Map browser languages to our supported languages
  const supportedLangs = {
    'en': 'en',
    'es': 'es',
    'pt': 'pt',
    'ca': 'es', // Catalan -> Spanish
    'gl': 'es', // Galician -> Spanish
    'eu': 'es', // Basque -> Spanish
  };
  
  return supportedLangs[lang] || 'en'; // Default to English
}

// Usage in report generator:
// const language = getReportLanguage();
// const templatePath = \`daily-report-template-\${language}.html\`;
`;

fs.writeFileSync(path.join(__dirname, 'language-detection.js'), detectionScript);

console.log('\nüìã Language detection helper saved to: language-detection.js');
console.log('\nüåç Supported languages:');
console.log('  - English (en)');
console.log('  - Spanish (es)');
console.log('  - Portuguese - European (pt)');