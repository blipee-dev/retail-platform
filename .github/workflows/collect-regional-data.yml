name: Regional Data Collection

on:
  schedule:
    # Run every hour to collect regional data
    - cron: '0 * * * *'
  workflow_dispatch:  # Allow manual triggers

jobs:
  collect-regional-data:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm install node-fetch@2
      
      - name: Collect regional data from Omnia sensors
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          node -e "
          const fetch = require('node-fetch');
          const http = require('http');
          
          async function collectRegionalData() {
            console.log('üó∫Ô∏è  Starting Regional Data Collection...');
            
            const supabaseUrl = process.env.SUPABASE_URL;
            const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
            
            // Omnia sensors with regional capabilities
            const sensors = [
              {
                id: 'f63ef2e9-344e-4373-aedf-04dd05cf8f8b',
                name: 'OML01-PC',
                ip: '93.108.96.96',
                port: 21001,
                auth: 'admin:grnl.2024',
                regions: {
                  region1: 'Entrance Area',
                  region2: 'Central Plaza',
                  region3: 'Food Court Queue',
                  region4: 'Premium Stores'
                }
              },
              {
                id: '7976051c-980b-45e1-b099-45d032f3c7aa',
                name: 'OML02-PC',
                ip: '188.37.175.41',
                port: 2201,
                auth: 'admin:grnl.2024',
                regions: {
                  region1: 'Entrance Zone',
                  region2: 'Main Shopping Area',
                  region3: 'Checkout Queue',
                  region4: 'Storefront Display'
                }
              },
              {
                id: '29e75799-328f-4143-9a2f-2bcc1269f77e',
                name: 'OML03-PC',
                ip: '188.37.124.33',
                port: 21002,
                auth: 'admin:grnl.2024',
                regions: {
                  region1: 'Mall Entrance',
                  region2: 'Central Corridor',
                  region3: 'Food Court',
                  region4: 'Premium Wing'
                }
              }
            ];
            
            const now = new Date();
            const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
            
            const formatDate = (date) => {
              const pad = (n) => n.toString().padStart(2, '0');
              return \`\${date.getFullYear()}-\${pad(date.getMonth() + 1)}-\${pad(date.getDate())}-\${pad(date.getHours())}:\${pad(date.getMinutes())}:\${pad(date.getSeconds())}\`;
            };
            
            for (const sensor of sensors) {
              console.log(\`\\nüì° Processing \${sensor.name} regional data...\`);
              
              try {
                // First, ensure region configurations exist for this sensor
                console.log('  üîß Checking region configurations...');
                
                // Get sensor metadata to ensure we have the right sensor_id
                const sensorResponse = await fetch(\`\${supabaseUrl}/rest/v1/sensor_metadata?id=eq.\${sensor.id}\`, {
                  headers: {
                    'apikey': supabaseKey,
                    'Authorization': \`Bearer \${supabaseKey}\`
                  }
                });
                
                if (!sensorResponse.ok || !(await sensorResponse.json()).length) {
                  console.log(\`  ‚ö†Ô∏è  Sensor \${sensor.id} not found in database\`);
                  continue;
                }
                
                // Check if regions are configured
                const regionsResponse = await fetch(\`\${supabaseUrl}/rest/v1/region_configurations?sensor_id=eq.\${sensor.id}\`, {
                  headers: {
                    'apikey': supabaseKey,
                    'Authorization': \`Bearer \${supabaseKey}\`
                  }
                });
                
                const existingRegions = await regionsResponse.json();
                console.log(\`  üìç Found \${existingRegions.length} configured regions\`);
                
                // Map region numbers to configuration IDs
                const regionConfigMap = {};
                for (const config of existingRegions) {
                  regionConfigMap[config.region_number] = config.id;
                }
                // Try to get regional data using linetype=0 (region type)
                const data = await new Promise((resolve, reject) => {
                  const path = \`/dataloader.cgi?dw=regionalcountlogcsv&report_type=0&statistics_type=3&region1=1&region2=1&region3=1&region4=1&time_start=\${formatDate(oneHourAgo)}&time_end=\${formatDate(now)}\`;
                  
                  const options = {
                    hostname: sensor.ip,
                    port: sensor.port,
                    path: path,
                    method: 'GET',
                    headers: {
                      'Authorization': 'Basic ' + Buffer.from(sensor.auth).toString('base64')
                    },
                    timeout: 30000
                  };
                  
                  const req = http.request(options, (res) => {
                    let data = '';
                    res.on('data', (chunk) => data += chunk);
                    res.on('end', () => {
                      if (res.statusCode === 200) {
                        resolve(data);
                      } else {
                        reject(new Error(\`HTTP \${res.statusCode}\`));
                      }
                    });
                  });
                  
                  req.on('error', reject);
                  req.on('timeout', () => {
                    req.destroy();
                    reject(new Error('Request timeout'));
                  });
                  
                  req.end();
                });
                
                // Parse CSV data
                const lines = data.trim().split('\\n');
                console.log(\`  ‚úÖ Retrieved \${lines.length - 1} records\`);
                
                if (lines.length < 2) {
                  console.log('  ‚ö†Ô∏è  No regional data available');
                  continue;
                }
                
                // Check if we got regional data
                const headerCheck = lines[0].toLowerCase();
                if (!headerCheck.includes('region') && !headerCheck.includes('zone')) {
                  console.log('  ‚ö†Ô∏è  No regional columns found in sensor data');
                  console.log('  ‚ÑπÔ∏è  This sensor may not support regional counting or it needs to be enabled');
                  continue;
                }
                
                // Parse and insert regional data
                console.log('  ‚úÖ Found regional data columns!');
                // Parse CSV headers
                const headerLine = lines[0];
                const headers = headerLine.split(',').map(h => h.trim());
                
                // Find region columns (Region1, Region2, Region3, Region4)
                const regionColumns = headers.reduce((acc, header, index) => {
                  const match = header.match(/^Region(\d+)$/i);
                  if (match) {
                    const regionNum = parseInt(match[1]);
                    if (regionNum >= 1 && regionNum <= 4) {
                      acc[\`region\${regionNum}\`] = index;
                    }
                  }
                  return acc;
                }, {});
                
                console.log(\`  üìç Found \${Object.keys(regionColumns).length} regions in data\`);
                
                // Check if we have any configured regions
                if (Object.keys(regionConfigMap).length === 0) {
                  console.log('  ‚ùå No region configurations found for this sensor!');
                  console.log('  ‚ÑπÔ∏è  Please configure regions in the database first');
                  continue;
                }
                
                // Process each data line
                const dataToInsert = [];
                for (let i = 1; i < lines.length; i++) {
                  const values = lines[i].split(',').map(v => v.trim());
                  if (values.length < headers.length) continue;
                  
                  const timestamp = values[0]; // StartTime column
                  
                  // Extract data for each region
                  for (const [regionKey, columnIndex] of Object.entries(regionColumns)) {
                    const regionNum = parseInt(regionKey.replace('region', ''));
                    const count = parseInt(values[columnIndex]) || 0;
                    
                    // Only insert if we have a configuration for this region
                    if (count > 0 && regionConfigMap[regionNum]) {
                      dataToInsert.push({
                        region_id: regionConfigMap[regionNum],
                        snapshot_time: timestamp,
                        occupancy_count: count,
                        occupancy_rate: 0, // Would need capacity to calculate
                        density_level: count > 500 ? 'high' : count > 200 ? 'medium' : count > 50 ? 'low' : 'empty'
                      });
                    } else if (count > 0) {
                      console.log(\`  ‚ö†Ô∏è  No configuration found for region \${regionNum}, skipping data point\`);
                    }
                  }
                }
                
                if (dataToInsert.length > 0) {
                  console.log(\`  üíæ Inserting \${dataToInsert.length} regional data records...\`);
                  
                  // Insert into regional_occupancy_snapshots table
                  const insertResponse = await fetch(\`\${supabaseUrl}/rest/v1/regional_occupancy_snapshots\`, {
                    method: 'POST',
                    headers: {
                      'apikey': supabaseKey,
                      'Authorization': \`Bearer \${supabaseKey}\`,
                      'Content-Type': 'application/json',
                      'Prefer': 'return=minimal'
                    },
                    body: JSON.stringify(dataToInsert)
                  });
                  
                  if (insertResponse.ok) {
                    console.log('  ‚úÖ Regional data inserted successfully');
                  } else {
                    const error = await insertResponse.text();
                    console.error(\`  ‚ùå Failed to insert regional data: \${error}\`);
                  }
                }
                
              } catch (error) {
                console.error(\`  ‚ùå Error: \${error.message}\`);
                console.log('  ‚ÑπÔ∏è  Regional data collection not available for this sensor');
              }
            }
            
            console.log('\\n‚úÖ Regional data collection completed!');
          }
          
          // Run the collection
          collectRegionalData()
            .then(() => process.exit(0))
            .catch((error) => {
              console.error('‚ùå Regional data collection failed:', error);
              process.exit(1);
            });
          "
      
      - name: Send notification on failure
        if: failure()
        run: |
          echo "‚ö†Ô∏è Regional data collection failed. Check the logs for details."